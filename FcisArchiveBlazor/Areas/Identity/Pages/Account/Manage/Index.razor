@page "/Account/Manage"
@using Microsoft.AspNetCore.Mvc;
@using System.Drawing;
@inject UserManager<StudentUser> _userManager
@inject SignInManager<StudentUser> _signInManager
@inject ApplicationDbContext _dbcontext
@inject HttpClient httpClint
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager nav;

@if (NotFound is not null)
{
    <p>@NotFound</p>
}
else
{
    <h1>Manage your account</h1>

    <div>
        <h2>Change your account settings</h2>
        <hr />
        <div class="d-flex justify-content-around">
            <div>
                @{
                    var hasExternalLogins = (async () => (await _signInManager.GetExternalAuthenticationSchemesAsync()).Any());
                }
                <ul class="nav nav-pills flex-column mb-5">
                    <li class="m-1 nav-item">
                        <a class="btn-primary btn" id="profile" href="Account/Manage">Profile</a>
                    </li>
                    <li class="m-1 nav-item">
                        <a class="btn-outline-primary btn" id="email" href="Account/Manage/Email">Email</a>
                    </li>
                    <li class="m-1 nav-item">
                        <a class="btn-outline-primary btn " id="change-password" href="Account/Manage/ChangePassword">Password</a>
                    </li>
                    @*   @if (hasExternalLogins.Invoke().Result)
                {
                <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link" href="./ExternalLogins">External logins</a></li>
                } *@
                    <li class="nav-item m-1">
                        <a class="btn-outline-primary btn" id="personal-data" href="Account/Manage/PersonalData">Personal data</a>
                    </li>

                    <li class="nav-item m-1">
                        <form class="form-inline" action="/Identity/Account/Logout" method="post">
                            <button type="submit" class="btn-outline-danger btn">Logout</button>
                        </form>
                    </li>

                </ul>
            </div>

            <div>
                <h3>@Title</h3>

                <EditForm Model="Input" Context="UpdateUserContext" OnValidSubmit="OnPostAsync">
                    <DataAnnotationsValidator />
                    <div class="d-flex justify-content-around gap-4 align-items-center">

                        <div>
                            <div class="mb-3 form-floating">
                                <input @bind="Input.Username" class="form-control" placeholder="Please choose your username." />
                                <label for="Input.Username" class="form-label">Username</label>
                                <ValidationMessage For="() => Input.Username" />
                            </div>
                            <div class="form-floating mb-3">
                                <input @bind="Input.FirstName" class="form-control" placeholder="Please choose your First Name." />
                                <label for="Input.FirstName" class="form-label">FirstName</label>
                                <ValidationMessage For="() => Input.FirstName" />

                            </div>
                            <div class="mb-3 form-floating">
                                <input @bind="Input.LastName" class="form-control" placeholder="Please choose your Last Name." />
                                <label for="Input.LastName" class="form-label">LastName</label>
                                <ValidationMessage For="() => Input.LastName" />

                            </div>

                            <button id="update-profile-button" type="submit" class="w-100  btn btn-lg btn-primary">Save</button>
                        </div>


                        <div>
                            <div class=" m-3">
                                <img src="@UserPhoto" width="225" />
                            </div>
                            <InputFile OnChange="ChangeUserPhoto" class="form-control w-75"></InputFile>

                        </div>
                    </div>
                    @StatusMessage

                </EditForm>
            </div>
            <div>

                @if (errors.Any())
                {
                    foreach (var error in errors)
                    {
                        <p class="text-danger"> @error.Message</p>
                        <div class="text-danger"> @error.InnerException</div>
                    }
                }

            </div>

        </div>
    </div>
}

@code {


    public string Title { get; set; } = "Profile";
    public string ActivePage { get; set; } = ManageNavPages.Index;
    public string NotFound { get; set; }
    public string UserPhoto { get; set; } = "/NoPhoto.png";
    public List<Exception> errors { get; set; } = new();
    public AuthenticationState userAuth { get; set; }
    public StudentUser user { get; set; }

    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public string Username { get; set; }

    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [TempData]
    public string StatusMessage { get; set; }

    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    [BindProperty]
    public InputModel Input { get; set; } = new();

    /// <summary>
    ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    public class InputModel
    {
        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [Required]
        public string Username { get; set; }

        [MinLength(2)]
        public string FirstName { get; set; }

        [MinLength(2)]
        public string LastName { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {

        try
        {

            userAuth = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        }
        catch (Exception ex)
        {

        }
        if (userAuth == null)
        {

            NotFound = $"Unable to load user with ID '{_userManager.GetUserId(userAuth.User)}'.";
            return;
        }

        user = _dbcontext.Users.FirstOrDefault(s => s.UserName == userAuth.User.Identity.Name);
        var userName = user.UserName;
        var phoneNumber = user.PhoneNumber;

        if (user.Image is not null) UserPhoto = user.Image;
        Username = userName;

        Input = new InputModel
            {
                Username = userName,
                FirstName = user.FirstName,
                LastName = user.LastName
            };

        await base.OnParametersSetAsync();
    }

    public async Task OnPostAsync()
    {
        try
        {
            if (Input.Username != user.UserName && Input.Username is not null)
            {
                var setUsernameResult = await _userManager.SetUserNameAsync(user, Input.Username);
                if (!setUsernameResult.Succeeded)
                {
                    var userId = await _userManager.GetUserIdAsync(user);
                    throw new InvalidOperationException($"Unexpected error occurred setting username for user with ID '{userId}'.");
                }
            }
            if (Input.FirstName != user.FirstName && Input.FirstName is not null)
            {
                user.FirstName = Input.FirstName;
                await _userManager.UpdateAsync(user);
            }
            if (Input.LastName != user.LastName && Input.LastName is not null)
            {
                user.LastName = Input.LastName;
                await _userManager.UpdateAsync(user);
            }

            // var req = await httpClint.GetAsync(nav.BaseUri+"Account/LoginInternal?id="+user.Id);

            nav.NavigateTo("/Account/RefreshSignIn?id=" + user.Id, true);

            StatusMessage = "Your profile has been updated";
            await _dbcontext.SaveChangesAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            //errors.Add(ex);
        }
        return;
    }

    async Task ChangeUserPhoto(InputFileChangeEventArgs input)
    {
        IBrowserFile file = input.File;
        long MAX_FILE_SIZE = 1024 * 1024 * 2;


        if (!Directory.Exists(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "UsersPhotos")))
        {
            Directory.CreateDirectory(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "UsersPhotos"));
        }

        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "UsersPhotos", $"UserPhoto-{user.Id}{file.Name[file.Name.LastIndexOf('.')..]}");

        if (!IsImageFile(filePath))
        {
            errors.Add(new Exception("File is not an image"));
            return;
        }

  


        await using FileStream fs = new(filePath, FileMode.Create);
        await file.OpenReadStream(MAX_FILE_SIZE).CopyToAsync(fs);
        user.Image = Path.Combine("UsersPhotos", $"UserPhoto-{user.Id}{file.Name[file.Name.LastIndexOf('.')..]}");
        _dbcontext.Users.Update(user);
        UserPhoto = user.Image;
        await _dbcontext.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);

    }
    private static bool IsImageFile(string filePath)
    {
        string extension = Path.GetExtension(filePath);
        if (extension != null)
        {
            string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp" };
            return Array.Exists(imageExtensions, ext => ext.Equals(extension, StringComparison.OrdinalIgnoreCase));
        }
        return false;
    }
   
}
