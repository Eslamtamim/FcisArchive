@page "/s/{year:int}"
@inject SignInManager<StudentUser> signInManager
@inject ApplicationDbContext _dbcontext
@inject IMemoryCache cache
@inject AuthenticationStateProvider GetAuthenticationStateAsync


<div>
    @if (Subjects is null)
    {
        <Loading/>
    }
    else if (Subjects!.Any())
    {
        <div class="m-5 d-flex flex-wrap justify-content-sm-around align-content-center">

            @foreach (var subject in Subjects)
            {
                <div>
                    <a class="btn btn-outline-secondary fw-bold m-2 p-2" href="/s/@Year/@subject">
                        @subject
                    </a>
                    <br/>
                </div>
            }
        </div>
    }
    else
    {
        <h4 class="alert-danger">
            No Subjects Yet
        </h4>
    }
    @if (_errors.Any())
    {
        foreach (var error in _errors)
        {
            <p class="alert-danger">@error</p>
        }
    }
</div>


@code {

    [Parameter]
    public int Year { get; set; }

    List<string> Subjects { get; set; }
    readonly List<string> _errors = new();
    public AuthenticationState UserAuth { get; set; }

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (UserAuth.User.Identity != null)
            {
                var userName = UserAuth.User.Identity.Name;
                var user = _dbcontext.Users.FirstOrDefault(s => s.UserName == userName);
                if (user is null) return base.OnInitializedAsync();
            }
    // caching the subjects for 1 day, if the cache is empty it will be filled
            Subjects = cache.GetOrCreate("subjects" + Year, entry =>
            {
                entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
                return _dbcontext.subjects.Where(s => s.Year == (FCISQuestionsHub.Core.Models.Year)Year).Select(s => s.Name).ToList();
            });
        }
        catch (Exception e)
        {
            _errors.Add(e.Message);
            _errors.Add(e.ToString());
        }

        return base.OnInitializedAsync();
    }

}