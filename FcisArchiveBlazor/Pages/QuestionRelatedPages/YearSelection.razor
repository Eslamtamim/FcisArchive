@inject ApplicationDbContext _dbcontext
@inject IMemoryCache cache

<h1>Select Which Year To Get Its Subjects</h1>
@if (years is null)
{
    <Loading />
}
else
{


    <div>

        <div class="d-flex  flex-wrap justify-content-start m-5">

            @foreach (var year in years)
            {
                <button class="btn btn-outline-secondary fw-bold m-2 p-2" @onclick="()=>{GetSubjects(year);}">
                    @year.ToString()
                </button>
            }

        </div>

        <div class="d-flex flex-wrap justify-content-start align-items-center m-5">

            @if (load)
            {
                <Loading />
            }
            else
            {
                <div class="d-flex flex-wrap justify-content-around gap-2 align-items-center ">

                    @foreach (var subject in subjects)
                    {

                        <div class="card d-flex flex-column justify-content-between gap-1" @onclick="()=>{GetLectures(subject);}">
                            <img class="card-image" src="/SubjectsPhotos/@(subject.Name).png" />
                            <div class="category fw-bold m-2 p-2">@subject.Name</div>
                        </div>
                    }
                </div>
            }


        </div>

        <div class="d-flex flex-wrap justify-content-start align-items-center m-5">


            @if (load)
            {
                <Loading />
            }
            else
            {
                <div class="d-flex flex-wrap justify-content-around align-items-center ">

                    @foreach (var lecture in lectuers)
                    {
                        <a class="btn btn-outline-secondary fw-bold m-2 p-2" href="/s/@subject.Name/@lecture.Name">
                            @lecture.Name
                        </a>
                    }


                </div>
            }


        </div>

    </div>

}
@code {
    bool load = false;

    record SubjectDTO(int id, string Name);
    record LectureDTO(int id, string Name);

    List<SubjectDTO> subjects { get; set; } = new();
    List<LectureDTO> lectuers { get; set; } = new();

    public List<Year> years;
    public Year? year = Year.Second;

    SubjectDTO subject;

    LectureDTO lecture;

    protected override async Task OnInitializedAsync()
    {

        years = cache.GetOrCreate("years", (entry) =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
            return _dbcontext.subjects.Select(x => x.Year).OrderBy(x => (int)x).Distinct().ToList();
        });
        GetSubjects(Year.Second);
        await base.OnInitializedAsync();
    }

    void GetSubjects(Year year)
    {
        load = true;
        this.year = year;
       subjects = cache.GetOrCreate("subjects"+(int)year, (entry) =>
       {
           entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
           return _dbcontext.subjects.Where(x => x.Year == year).Select(s => new SubjectDTO(s.Id, s.Name)).ToList();
       });
        lecture = null;
        load = false;
        StateHasChanged();
    }

    void GetLectures(SubjectDTO subject)
    {
        load = true;
        this.subject = subject;
        lectuers = cache.GetOrCreate("lectuers"+subject.Name, (entry) =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
            return _dbcontext.lectures.Where(x => x.SubjectId == subject.id).Select(l => new LectureDTO(l.Id, l.Name)).ToList();
        });
        load = false;
        StateHasChanged();
    }

   
}

