@page "/s/{subject}/{LectureName}"
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<StudentUser> userManager
@inject SignInManager<StudentUser> signInManager
@inject NavigationManager navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ApplicationDbContext _dbcontext
@inject IMemoryCache cache



<div class="d-flex align-content-between justify-content-between">
    <div class="d-flex align-items-center justify-content-center align-content-center gap-3">
        <a class="btn btn-outline-secondary " href="/s/@Subject">&larr;</a>

        <h3 style="margin-bottom:-3px;" class="fw-bold">@LectureName.Replace('-', ' ').Replace("Lec", "Lecture")</h3>

    </div>

    <div class="d-flex flex-column gap-1">

        <AuthorizeView>
            <div class="d-flex gap-2">
                <button class="btn d-inline btn-warning" @onclick="ResetQuestionsAnswers">Reset Answers</button>
                <AuthorizeView Context="childContext" Roles="Super-Admin, Admin">
                    <button class="btn d-inline btn-danger" @onclick="DeleteQuestionsBySubject">Delete Lecture</button>
                </AuthorizeView>
            </div>
        </AuthorizeView>

    </div>
</div>

@if (FilteredQuestions is null || isLoading)
{
    <Loading />
}
else if (FilteredQuestions!.Count == 0)
{
    <div class="alert alert-danger m-4" role="alert">
        no questions yet
    </div>
}
else
{
    <div>

        <div class="d-flex flex-column @(_errors.Count > 0 ? "justify-content-between" : "justify-content-between") ">

            <div>

                @foreach (var error in _errors)
                {
                    <p class="my-0 text-danger">@error</p>
                }
            </div>

            @if (UserName is null)
            {
                <div class="d-flex m-3">
                    <a class="btn mx-3 btn-secondary" href="Account/Register">Register</a>
                    <a class="btn btn-outline-secondary " href="Account/Login">Log in</a>
                </div>
            }
        </div>

        <div class="pagesAndCount my-4 d-flex justify-content-between align-items-center">

            <p class="fw-bolder align-self-end m-0 mx-3"> Questions Solved : <span class="alert-info"> @QuestionsSolved / @QuestionCount </span> </p>

            <div>
                <button class="btn @(questionType is null ? "btn-primary" : "btn-outline-primary")" @onclick="() => QuestionsByType(null)">All</button>
                <button class="btn @(questionType is QuestionType.MCQ ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => QuestionsByType(QuestionType.MCQ)">MCQ</button>
                <button class="btn @(questionType is QuestionType.TrueFalse ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => QuestionsByType(QuestionType.TrueFalse)">T&F</button>
            </div>
        </div>
        @{
            int questionNumber = ((page - 1) * DatabaseSelectionChunk)+1;
        }
        @foreach (var question in FilteredQuestions!)
        {

            <QuestionCard Question="@question" IsAuthorized="@(UserName is not null)"
                          StudentAnswer="@(FindStudentAnswer.TryGetValue(question.Id, out var value) ? value : null)"
                          StudentUser="@StudentUser"
                          QuestionNumber="@questionNumber" />
            questionNumber++;
        }

        <div class="d-flex flex-column justify-content-center align-items-center">
            <div id="pages" class="d-flex m-4 justify-content-center align-content-center gap-2 align-items-center flex-wrap">

                @foreach (var currentPage in Enumerable.Range(1, (int)pages))
                {
                    <a class=" btn @(page  == currentPage ? "btn-secondary" : "btn-outline-secondary")" @onclick="()=>{SetPage(currentPage);}" href="/s/@Subject/@LectureName?page=@currentPage">
                        @currentPage.ToString()
                    </a>
                }

            </div>

            <p class="small">Each page contain at most 20 Questions</p>

        </div>
    </div>
    <MadeWithLove />

    <div class="sticky">
        <div class="d-flex justify-content-end">
        <div class="d-flex flex-column gap-2">
                <button onclick="scrollToTop()" class="scrollButton oi oi-arrow-top"></button>
                <button onclick="scrollToBottom()" class="scrollButton  oi oi-arrow-bottom"></button>
        </div>   
        </div>
    </div>

}



@code {

    [Parameter]
    public string LectureName { get; set; }

    [Parameter]
    public string Subject { get; set; }

    //public record StudentAnswersDTO(string StudentId, long questionId, long answerId);

    List<Question> FilteredQuestions { get; set; }
    List<StudentQuestionAnswer> StudentAnswers { get; set; } = new();

    Dictionary<long, StudentQuestionAnswer> FindStudentAnswer { get; set; } = new();
    readonly List<string> _errors = new List<string>();
    AuthenticationState UserAuth { get; set; }
    StudentUser StudentUser { get; set; }
    Lecture Lecture { get; set; }
    int page = 1;
    decimal pages = 1;
    const int DatabaseSelectionChunk = 20;
    bool isLoading = false;
    long QuestionCount { get; set; }
    long QuestionsSolved { get; set; }
    string UserName { get; set; }
    QuestionType? questionType = null;


    protected override async Task OnInitializedAsync()
    {
        var uri = navigation.ToAbsoluteUri(navigation.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("page", out var currentPage))
        {
            page = int.TryParse(currentPage, out var result) ? result : 1;
            if (page < 1) page = 1;
        }
        else
        {
            navigation.NavigateTo(navigation.Uri + $"?page={page}", true);
        }

        UserAuth = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        if (UserAuth.User.Identity != null) UserName = UserAuth.User.Identity.Name;

        if (UserName is null)
        {
            _errors.Add("you are not logged in");
            _errors.Add("login to save the state of your answers");
        }
        else
        {
            StudentUser = await userManager.FindByNameAsync(UserName);
            Lecture = await _dbcontext.lectures.FirstOrDefaultAsync(l => l.Name == LectureName);
            if (Lecture is null)
            {
                _errors.Add("Lecture not found");
                FilteredQuestions = new();
                return;
            }
            StudentAnswers = await GetStudentQuestionAnswers();
            foreach (var sq in StudentAnswers) FindStudentAnswer[sq.questionId] = sq;
        }
        //cache the question count for 1 day
        QuestionCount = cache.GetOrCreate<long>("questionCount" + LectureName, entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
            return _dbcontext.questions.LongCount(q => q.Lecture.Name == LectureName);
        });
        QuestionsSolved = _dbcontext.studentQuestionAnswer.LongCount(q => q.question.Lecture.Name == LectureName && q.student.UserName == UserName);



        pages = (decimal)QuestionCount / DatabaseSelectionChunk;
        pages = Math.Ceiling(pages);

        FilteredQuestions = await cache.GetOrCreateAsync($"p{page}" + LectureName, async entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
            return await GetQuestions(LectureName);
        });

        await base.OnInitializedAsync();

    }


    async Task<List<Question>> GetQuestions(string lectureName)
    {
        try
        {
            if (string.IsNullOrEmpty(lectureName))
            {
                return new List<Question>();
            }


            List<Question> result = new();


            var query = await _dbcontext.questions
                .Where(q => q.Lecture.Name == lectureName)
                .Include(q => q.answers)
                .OrderBy(q => q.Id)
                .Skip((page - 1) * DatabaseSelectionChunk)
                .Take(DatabaseSelectionChunk)
                .ToListAsync();

            result.AddRange(query);

            return result;
        }
        catch (Exception e)
        {
            _errors.Add(e.Message);
            return new List<Question>();
        }
    }

    async Task<List<StudentQuestionAnswer>> GetStudentQuestionAnswers()
    {
        return await _dbcontext.studentQuestionAnswer
            .Where(q => q.question.LectureId == Lecture.Id
                        && q.studentsId == StudentUser.Id).ToListAsync();
    }

    async Task DeleteQuestionsBySubject()
    {
        try
        {
            // just delete the lecture and the questions will be deleted by cascade
            var qs = _dbcontext.lectures.FirstOrDefault(l => l.Name == LectureName);
            if (qs != null) _dbcontext.lectures.Remove(qs);
            var subjectYear = _dbcontext.subjects.FirstOrDefault(s => s.Name == Subject)!.Year;
            cache.Remove("subjects" + (int)subjectYear);
            cache.Remove("lectures" + Subject);
            cache.Remove("questionCount" + LectureName);
            cache.Remove($"p{page}" + LectureName);
            await _dbcontext.SaveChangesAsync();
            navigation.NavigateTo(navigation.BaseUri, true, true);
        }
        catch (Exception ex)
        {
            _errors.Add(ex.Message);
            _errors.Add(ex.InnerException?.Message);
        }
    }

    async Task QuestionsByType(QuestionType? type)
    {
        isLoading = true;
        QuestionCount = cache.GetOrCreate<long>("questionCount" + LectureName, entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
            return _dbcontext.questions.LongCount(q => q.Lecture.Name == LectureName);
        });

        FilteredQuestions = await cache.GetOrCreateAsync($"p{page}" + LectureName, async entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(1);
            return await GetQuestions(LectureName);
        });

        if (type is null)
        {

            questionType = type;
            if (StudentUser is not null) StudentAnswers = await GetStudentQuestionAnswers();
            isLoading = false;
            StateHasChanged();
            return;
        }
        if (StudentUser is not null)
        {

            StudentAnswers = await _dbcontext.studentQuestionAnswer
                .Where(q => q.question.LectureId == Lecture.Id
                            && q.studentsId == StudentUser.Id
                            && q.question.QuestionType == type).ToListAsync();
        }

        FilteredQuestions = FilteredQuestions.Where(q => q.QuestionType == type).ToList();
        questionType = type;
        QuestionCount = FilteredQuestions.Count;
        isLoading = false;
        StateHasChanged();
    }

    async Task ResetQuestionsAnswers()
    {
        try
        {
            var qs = _dbcontext.studentQuestionAnswer.Where(sqa =>
                sqa.studentsId == StudentUser.Id
                && sqa.question.Lecture.Name == LectureName).ToList();
            _dbcontext.studentQuestionAnswer.RemoveRange(qs);
            await _dbcontext.SaveChangesAsync();
            navigation.NavigateTo(navigation.Uri, true, true);
        }
        catch (Exception ex)
        {
            _errors.Add(ex.Message);
            if (ex.InnerException != null) _errors.Add(ex.InnerException.Message);
        }
    }

    async void SetPage(int currentPage)
    {

        page = currentPage;
        isLoading = true;
        if (UserName is not null)
        {
            StudentUser = await userManager.FindByNameAsync(UserName);
            Lecture = await _dbcontext.lectures.FirstOrDefaultAsync(l => l.Name == LectureName);
            StudentAnswers = await GetStudentQuestionAnswers();
            foreach (var sq in StudentAnswers) FindStudentAnswer[sq.questionId] = sq;
        }

        await QuestionsByType(questionType);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

}

<script>
    function scrollToBottom() {
        window.scrollTo({
            top: document.body.scrollHeight,
            behavior: 'smooth'
        });
    }
    function scrollToTop() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }

</script>
