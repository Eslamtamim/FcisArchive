@page "/EditQuestion/{questionId}"

@inject ApplicationDbContext _dbcontext
@inject NavigationManager nav
@inject IMemoryCache cache


<AuthorizeView Roles="Admin, Super-Admin">
    <Authorized>

        <div class="card mb-3 Qcard">

            <EditForm OnValidSubmit="SubmitEditedQuestion" Context="editQContext" Model="Question">
                <DataAnnotationsValidator />

                <div class="card-body">
                    <div class="d-flex gap-4 mb-4 justify-content-between align-items-center">
                        <InputTextArea @bind-Value="@Question.Text"
                                       class="card-title w-100 form-control-lg fw-bolder alertinfo d-inline">
                            @Question.Text
                        </InputTextArea>
                        <ValidationMessage For="() => Question.Text" />

                        <div>
                            <a class="d-block btn btn-outline-secondary"
                               href="/s/@Question.Lecture.Name.Split('-')[0]/@Question.Lecture.Name/">
                                Back
                            </a>
                        </div>

                    </div>
                    <div class="d-flex justify-content-between mx">
                        <div>

                            <label>Change Question Photo</label>
                            <InputFile OnChange="SavePhoto" class="form-control form-control" />
                            <div>
                                @if (Question.answers is not null && Question.answers.Any())
                                {
                                    @foreach (var ans in Question.answers)
                                    {
                                        <div class="d-flex justify-content-around align-items-center "
                                        @onclick="StateHasChanged">
                                            <div class="card mx-4 my-3">
                                                <div class="card-body">
                                                    <InputText @bind-Value="@ans.Text" class="form-control fw-bold">
                                                        @ans.Text ✅
                                                    </InputText>
                                                </div>
                                            </div>
                                            @if (ans.IsCorrect)
                                            {
                                                <input type="radio" class="form-check-input" name="ansCorrecties" checked
                                                       value="@ans.IsCorrect" @onclick="async () =>{ var correct = Question.answers.FirstOrDefault(a => a.IsCorrect); if (correct is not null) correct.IsCorrect = false; ans.IsCorrect = true; await _dbcontext.SaveChangesAsync(); }" />
                                            }
                                            else
                                            {
                                                <input type="radio" class="form-check-input" name="ansCorrecties"
                                                       value="@ans.IsCorrect" @onclick="async () =>{ var correct = Question.answers.FirstOrDefault(a => a.IsCorrect); if (correct is not null) correct.IsCorrect = false; ans.IsCorrect = true; await _dbcontext.SaveChangesAsync(); }" />
                                            }
                                            <div class="m-4 btn btn-danger" @onclick="() => Question.answers.Remove(ans)">
                                                x
                                            </div>

                                        </div>
                                    }
                                }

                                else
                                {
                                    <div class="alert alert-danger m-2 px-5" role="alert"> no answers </div>
                                }
                                <div class="btn btn-outline-secondary m-4 px-xxl-4"
                                @onclick="() =>{ Question.answers.Add(new Answer()); StateHasChanged(); }">
                                    + Create Answer
                                </div>

                                <details class="my-3">
                                    <summary class="alert-danger d-inline fw-bold">Click Me For a Hint</summary>
                                    <br />
                                    <InputText @bind-Value="@Question.Hint" class="alert-warning d-inline fw-bolder">
                                        @Question.Hint
                                    </InputText>
                                </details>
                            </div>


                        </div>
                        <div>

                            @if (Question.Photo is not null)
                            {
                                <img alt="Question Photo" src="@Question.Photo" width="400" />

                                <br />

                                <br />

                                <div @onclick="() => { Question.Photo = null; }" class="btn btn-danger">delete photo</div>
                            }
                            else
                            {
                                <img alt="No Question Photo" class="d-block" src="QuestionsPhotos/404notfound.png" width="400" />
                            }
                        </div>

                    </div>


                    <div class="m-4">

                        <lable class="fw-bold m-2"> Set The Subject of The Question </lable>
                        <select value="@Question.SubjectId" @onchange="GetLectures" class="form-control w-25 fw-bold">
                            @foreach (var sub in Subjects)
                            {
                                <option value="@sub.Id"> @sub.Name </option>
                            }
                        </select>
                        <ValidationMessage For="() => Question.SubjectId" />

                    </div>

                    <div class="m-4">

                        <lable class="fw-bold m-2"> Set The Lecture of The Subject </lable>
                        <InputSelect @bind-Value="@Question.LectureId" class="form-control w-25 fw-bold">
                            @if (Lectures is not null)
                            {
                                @foreach (var lec in Lectures)
                                {
                                    <option value="@lec.Id"> @lec.Name </option>
                                }
                            }
                            else
                            {
                                <option value="0"></option>
                                <option value="0"> Select Subject First </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Question.LectureId" />

                    </div>

                </div>
                <button type="submit" class="btn btn-secondary mx-3 my-3">Save</button>
                <div @onclick="DeleteQuestion" class="btn btn-danger mx-3 my-3">
                    Delete Question
                </div>
                @if (SavedChanges.Any())
                {
                    <ul>
                        <li class="m-1 d-inline-block alert-success">@SavedChanges.Last()</li>
                    </ul>
                }
                @if(Errors.Any())
                {
                    @foreach (var error in Errors)
                    {
                        <ul>
                            @foreach (var err in error)
                            {
                                <li class="m-1 d-inline-block alert-danger">@err</li>
                            }
                        </ul>
                    }
                }
            </EditForm>

        </div>

    </Authorized>

    <NotAuthorized>
        <h3 class="text-danger">
            You are not allowed to view this page, if you think otherwise contact
            <a target="_blank"
               href="https://t.me/mimatmalxe">
                Tamim(mimatmalxe)
            </a>
        </h3>
        <h4 class="text-danger">This page is coming soon for all users, Just working on it...</h4>
    </NotAuthorized>

</AuthorizeView>


@code {

    [Parameter]
    public string QuestionId { get; set; }

    record SubjectDto(int Id, string Name);

    record LectureDto(int Id, string Name);

    List<SubjectDto> Subjects { get; set; } = new();
    List<LectureDto> Lectures { get; set; }
    public Question Question { get; set; } = new();
    public Queue<string> SavedChanges { get; set; } = new();
public List<List<string>> Errors { get; set; } = new();

    protected override void OnInitialized()
    {
        Question = _dbcontext.questions.Include(q => q.answers).IgnoreAutoIncludes().FirstOrDefault(q => q.Id ==
                                                                                                         Convert.ToInt64(QuestionId));

        Subjects = _dbcontext.subjects.Select(q => new SubjectDto(q.Id, q.Name)).Distinct().ToList();
        Subjects.Insert(0, new SubjectDto(0, ""));
        Lectures = _dbcontext.lectures.Where(q => q.SubjectId == Question.SubjectId).Select(q => new LectureDto(q.Id,
            q.Name)).Distinct().ToList();
        Lectures.Insert(0, new LectureDto(0, ""));
        base.OnInitialized();
    }

    async void SubmitEditedQuestion()
    {
        // removing the cache of the old lecture

        await ClearCache(Question);
        _dbcontext.Update(Question);
        await _dbcontext.SaveChangesAsync();
        // removing the cache of the new lecture
        await ClearCache(Question);


        await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Saved Changes");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(4));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
    }

    async void SavePhoto(InputFileChangeEventArgs input)
    {
        var file = input.File;
        const long maxFileSize = 1024 * 1024 * 5;

        if (!Directory.Exists(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "QuestionsPhotos")))
        {
            Directory.CreateDirectory(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "QuestionsPhotos"));
        }
        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "QuestionsPhotos",
            $"QuestionPhoto-{Question.Id}{file.Name[file.Name.LastIndexOf('.')..]}");
        await using FileStream fs = new(filePath, FileMode.Create);
        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
        Question.Photo = Path.Combine("QuestionsPhotos",
            $"QuestionPhoto-{Question.Id}{file.Name[file.Name.LastIndexOf('.')..]}");
        this.StateHasChanged();
    }


    void GetLectures(ChangeEventArgs e)
    {
        if (e.Value != null) Question.SubjectId = int.Parse(e.Value.ToString() ?? string.Empty);
        Lectures = _dbcontext.lectures.Where(q => q.SubjectId == Question.SubjectId).Select(q => new LectureDto(q.Id,
            q.Name)).Distinct().ToList();
        Lectures.Insert(0, new LectureDto(0, ""));
        StateHasChanged();
    }

    async void DeleteQuestion()
    {
        try
        {
            _dbcontext.questions.Remove(Question);
            cache.Remove(Question.Lecture.Name);
            cache.Remove("questionCount" + Question.Lecture.Name);
            await _dbcontext.SaveChangesAsync();
            nav.NavigateTo(nav.BaseUri + $"s/{Question.Lecture.Name.Split('-')[0]}/{Question.Lecture.Name}#{Question.Id}", false,
                true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }


    async Task ClearCache(Question question)
    {
        try
        {

            cache.Remove("questionCount" + question.Lecture.Name);
            // clearing the cache for the pagination
            var questionCount = await _dbcontext.questions.Where(q => q.LectureId == question.LectureId).LongCountAsync();
            var pages = (decimal)questionCount / 20;
            pages = Math.Ceiling(pages);
            foreach (var page in Enumerable.Range(1, (int)pages))
            {
                cache.Remove($"p{page}" + question.Lecture.Name);
            }
        }
        catch (Exception ex)
        {
            List<string> strings = new()
            {
                "Couldn't clear cache for " + question.Text,
                ex.Message
            };
            if (ex.InnerException != null) strings.Add(ex.InnerException.Message);
            Errors.Add(strings);
            StateHasChanged();
        }
    }

}