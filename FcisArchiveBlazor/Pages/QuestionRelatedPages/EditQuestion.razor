@page "/EditQuestion/{questionId}"

@inject ApplicationDbContext _dbcontext
@inject NavigationManager nav
@inject IMemoryCache cache



<AuthorizeView Roles="Admin, Super-Admin">
    <Authorized>

        <div class="card mb-3 Qcard">

            <EditForm OnValidSubmit="SubmitEditedQuestion" Context="EditQContext" Model="question">
                <DataAnnotationsValidator />

                <div class="card-body">
                    <div class="d-flex gap-4 mb-4 justify-content-between align-items-center">
                        <InputTextArea @bind-Value="@question.Text"
                            class="card-title w-100 form-control-lg fw-bolder alertinfo d-inline">@question.Text
                        </InputTextArea>
                        <ValidationMessage For="() => question.Text" />

                        <div>
                            <a class="d-block btn btn-outline-secondary"
                                href="/s/@question.Lecture.Name.Split('-')[0]/@question.Lecture.Name/">Back</a>
                        </div>

                    </div>
                    <div class="d-flex justify-content-between mx">
                        <div>

                            <label>Change Question Photo</label>
                            <InputFile OnChange="SavePhoto" class="form-control form-control" />
                            <div>
                                @if (question.answers is not null && question.answers.Count() > 0)
                                {
                                    @foreach (var ans in question.answers)
                                    {
                                        <div class="d-flex justify-content-around align-items-center "
                                        @onclick="StateHasChanged">
                                            <div class="card mx-4 my-3">
                                                <div class="card-body">
                                                    <InputText @bind-Value="@ans.Text" class="form-control fw-bold"> @ans.Text ✅
                                                    </InputText>
                                                </div>
                                            </div>
                                            @if (ans.IsCorrect)
                                            {
                                                <input type="radio" class="form-check-input" name="ansCorrecties" checked
                                                    value="@ans.IsCorrect" @onclick="async () =>{ var correct = question.answers.FirstOrDefault(a => a.IsCorrect);
                                                    if (correct is not null) correct.IsCorrect = false;
                                                    ans.IsCorrect = true;
                                                    await _dbcontext.SaveChangesAsync();
                                                    }" />
                                            }
                                            else
                                            {
                                                <input type="radio" class="form-check-input" name="ansCorrecties"
                                                    value="@ans.IsCorrect" @onclick="async ()=>{
                                                    var correct = question.answers.FirstOrDefault(a => a.IsCorrect);
                                                    if (correct is not null) correct.IsCorrect = false;
                                                    ans.IsCorrect = true;
                                                    await _dbcontext.SaveChangesAsync();
                                                    }" />
                                            }
                                            <div class="m-4 btn btn-danger" @onclick="() => question.answers.Remove(ans)">x
                                            </div>

                                        </div>

                                    }

                                }

                                else
                                {
                                    <div class="alert alert-danger m-2 px-5" role="alert"> no answers </div>
                                }
                                <div class="btn btn-outline-secondary m-4 px-xxl-4"
                                @onclick="() =>{ question.answers.Add(new Answer()); StateHasChanged(); }">
                                    + Create Answer
                                </div>

                                <details class="my-3">
                                    <summary class="alert-danger d-inline fw-bold">Click Me For a Hint</summary>
                                    <br />
                                    <InputText @bind-Value="@question.Hint" class="alert-warning d-inline fw-bolder">
                                        @question.Hint</InputText>
                                </details>
                            </div>


                        </div>
                        <div>

                            @if (question.Photo is not null)
                            {
                                <img src="@question.Photo" width="400" />

                                <br />

                                <br />

                                <div @onclick="() => { question.Photo = null; }" class="btn btn-danger">delete photo</div>
                            }
                            else
                            {
                                <img class="d-block" src="QuestionsPhotos/404notfound.png" width="400" />
                            }
                        </div>

                    </div>


                    <div class="m-4">

                        <lable class="fw-bold m-2"> Set The Subject of The Question </lable>
                        <select value="@question.SubjectId" @onchange="GetLectures" class="form-control w-25 fw-bold">
                            @foreach (var sub in subjects)
                            {
                                <option value="@sub.id"> @sub.Name </option>
                            }
                        </select>
                        <ValidationMessage For="() => question.SubjectId" />

                    </div>

                    <div class="m-4">

                        <lable class="fw-bold m-2"> Set The Lecture of The Subject </lable>
                        <InputSelect @bind-Value="@question.LectureId" class="form-control w-25 fw-bold">
                            @if (lectuers is not null)
                            {
                                @foreach (var lec in lectuers)
                                {
                                    <option value="@lec.id"> @lec.Name </option>
                                }
                            }
                            else
                            {
                                <option value="0"></option>
                                <option value="0"> Select Subject First </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => question.LectureId" />

                    </div>

                </div>
                <button type="submit" class="btn btn-secondary mx-3 my-3">Save</button>
                <div @onclick="DeleteQuestion" class="btn btn-danger mx-3 my-3">
                    Delete Question
                </div>
                @if (savedChanges.Any())
                {
                    <ul>
                        <li class="m-1 d-inline-block alert-success">@savedChanges.Last()</li>
                    </ul>
                }
            </EditForm>

        </div>

    </Authorized>

    <NotAuthorized>
        <h3 class="text-danger">You are not allowed to view this page, if you think otherwise contact <a target="_blank"
                href="https://t.me/mimatmalxe">Tamim(mimatmalxe)</a></h3>
        <h4 class="text-danger">This page is coming soon for all users, Just working on it...</h4>
    </NotAuthorized>

</AuthorizeView>


@code {

    [Parameter]
    public string questionId { get; set; }

    record SubjectDTO(int id, string Name);
    record LectureDTO(int id, string Name);

    public Question question { get; set; } = new();
    List<SubjectDTO> subjects { get; set; } = new();
    List<LectureDTO> lectuers { get; set; }
    SubjectDTO subjectDTO { get; set; }
    LectureDTO lectureDTO { get; set; }
    public Queue<string> savedChanges { get; set; } = new();
    public string statePhoto { get; set; }
    public bool editMood { get; set; }

    protected override void OnInitialized()
    {
        question = _dbcontext.questions.Include(q => q.answers).IgnoreAutoIncludes().FirstOrDefault(q => q.Id ==
        Convert.ToInt64(questionId));

        subjects = _dbcontext.subjects.Select(q => new SubjectDTO(q.Id, q.Name)).Distinct().ToList();
        subjects.Insert(0, new SubjectDTO(0, ""));
        lectuers = _dbcontext.lectures.Where(q => q.SubjectId == question.SubjectId).Select(q => new LectureDTO(q.Id,
        q.Name)).Distinct().ToList();
        lectuers.Insert(0, new LectureDTO(0, ""));
        base.OnInitialized();
    }

    async void SubmitEditedQuestion()
    {
        // removing the cache of the old lecture
        cache.Remove(question.Lecture.Name);
        cache.Remove("questionCount" + question.Lecture.Name);

        _dbcontext.Update(question);
        _dbcontext.SaveChanges();
        // removing the cache of the new lecture
        cache.Remove(question.Lecture.Name);
        cache.Remove("questionCount" + question.Lecture.Name);

        await Task.Run(async () =>
        {
            savedChanges.Enqueue("Saved Changes");
            await InvokeAsync(StateHasChanged);
            await Task.Delay(TimeSpan.FromSeconds(4));
            savedChanges.Dequeue();
            await InvokeAsync(StateHasChanged);
        });
    }

    async void SavePhoto(InputFileChangeEventArgs input)
    {
        IBrowserFile file = input.File;
        long MAX_FILE_SIZE = 1024 * 1024 * 5;

        if (!Directory.Exists(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "QuestionsPhotos")))
        {
            Directory.CreateDirectory(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "QuestionsPhotos"));
        }
        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "QuestionsPhotos",
        $"QuestionPhoto-{question.Id}{file.Name[file.Name.LastIndexOf('.')..]}");
        await using FileStream fs = new(filePath, FileMode.Create);
        await file.OpenReadStream(MAX_FILE_SIZE).CopyToAsync(fs);
        question.Photo = Path.Combine("QuestionsPhotos",
        $"QuestionPhoto-{question.Id}{file.Name[file.Name.LastIndexOf('.')..]}");
        this.StateHasChanged();
    }


    void GetLectures(ChangeEventArgs e)
    {

        question.SubjectId = int.Parse(e.Value.ToString());
        lectuers = _dbcontext.lectures.Where(q => q.SubjectId == question.SubjectId).Select(q => new LectureDTO(q.Id,
        q.Name)).Distinct().ToList();
        lectuers.Insert(0, new LectureDTO(0, ""));
        StateHasChanged();
    }

    async void DeleteQuestion()
    {
        try
        {

            _dbcontext.questions.Remove(question);
            cache.Remove(question.Lecture.Name);
            cache.Remove("questionCount" + question.Lecture.Name);
            await _dbcontext.SaveChangesAsync();
            nav.NavigateTo(nav.BaseUri + $"s/{question.Lecture.Name.Split('-')[0]}/{question.Lecture.Name}#{question.Id}", false,
            true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}
