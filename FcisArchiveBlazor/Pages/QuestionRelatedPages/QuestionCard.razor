@page "/s/{subject}/{UrlSubjectName}/{questionId:long}"
@page "/Question/{questionId:long}"
@inject UserManager<StudentUser> userManager
@inject SignInManager<StudentUser> _singInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@inject NavigationManager navigation
@inject ApplicationDbContext _dbcontext

@if (Question is null)
{
    <h1 class="text-danger d-flex justify-content-center align-items-center">404 NOT FOUND</h1>
}
else
{
    <div class="card mb-3 Qcard" id="@Question.Id">

        <div class="card-body">
            <div class="d-flex justify-content-between">

                <h5 class=" card-title fw-bolder alertinfo d-inline ">@Question.Text</h5>
                <AuthorizeView Roles="Admin, Super-Admin">
                    <div>
                        <a class="d-block btn btn-outline-secondary" href="/EditQuestion/@Question.Id">
                            <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512"><path d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160V416c0 53 43 96 96 96H352c53 0 96-43 96-96V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96z" /></svg>
                        </a>
                    </div>
                </AuthorizeView>

            </div>
            <div>

                @if (Question.Photo is not null)
                {
                    <img src="@Question.Photo" width="400" alt = "Question Photo"/>
                }
            </div>
            @if (Question.answers is not null && Question.answers.Any())
            {

                if (IsAuthorized)
                {
                    foreach (var ans in Question.answers)
                    {

                        if (StudentAnswer is null)
                        {
                            <div class="card mx-4 my-3 clickableAns-before">
                                <div class="card-body" @onclick="() => SubmitAnswer(ans.Id)">
                                    <span class="fw-bold alert-warning"> @ans.Text </span>
                                </div>
                            </div>
                        }
                        else
                        {
                            if (ans.Id != StudentAnswer.answerId)
                            {
                                if (ans.IsCorrect)
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-success"> @ans.Text ✅ </span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-secondary"> @ans.Text </span>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                if (ans.IsCorrect)
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-success"> @ans.Text ✅ </span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-danger"> @ans.Text ❌ </span>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                }
                else
                {
                    @foreach (var ans in Question.answers)
                    {
                        if (NotAuthAnswerId == 0)
                        {
                            <div class="card mx-4 my-3 clickableAns-before">
                                <div class="card-body" @onclick="() => NotAuthAnswerId = ans.Id">
                                    <span class="fw-bold alert-warning"> @ans.Text </span>
                                </div>
                            </div>
                        }
                        else
                        {
                            if (NotAuthAnswerId == ans.Id)
                            {
                                if (ans.IsCorrect)
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-success"> @ans.Text ✅ </span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-danger"> @ans.Text ❌ </span>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                if (ans.IsCorrect)
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-success"> @ans.Text ✅ </span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card mx-4 my-3">
                                        <div class="card-body">
                                            <span class="fw-bold alert-secondary"> @ans.Text </span>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                <div class="alert alert-danger m-2 px-5 w-25" role="alert"> no answers </div>
            }

            <div style="margin-bottom:-12px" class="d-flex justify-content-between align-items-center">
                <div>
                    <details class="my-3">
                        <summary class="alert-danger d-inline fw-bold">Click Me For a Hint</summary>
                        <br />
                        <p class="alert-warning d-inline fw-bolder">@Question.Hint</p>
                    </details>
                    <p class="fw-bold  d-inline ">
                        Lec @Question.Lecture.Name
                    </p>
                    <p class="small" style="margin-bottom: 4px">
                        Question ID : @Question.Id | @(Question.QuestionType == 0 ? "MCQ" : "True & False") | Author : @Question.AuthorName
                    </p>
                </div>
                <div class="d-flex justify-content-between gap-1 align-items-center">
                    <button class="btn btn-outline-warning" @onclick="ResetQuestionAnswer">Reset Answer</button>
                    @if (QuestionId == 0)
                    {
                        <a class="btn btn-outline-primary" href="/s/@Question.Subject.Name/@Question.Lecture.Name/@Question.Id">Details and Chat</a>
                    }
                    else
                    {
                        <div>
                            <a class="btn btn-outline-secondary" href="/s/@Question.Subject.Name]/@Question.Lecture.Name/">Back</a>
                        </div>
                    }
                </div>


            </div>



        </div>
        @if (Errors.Any())
        {
            foreach (var error in Errors)
            {
                <p class="text-danger">@error</p>
            }
        }
    </div>
}


@code {
    
    [Parameter]
    public Question Question { get; set; }
    [Parameter]
    public bool IsAuthorized { get; set; } = false;
    [Parameter]
    public StudentQuestionAnswer StudentAnswer { get; set; }
    [Parameter]
    public StudentUser StudentUser { get; set; }
    [Parameter]
    public long QuestionId { get; set; }
    [Parameter]
    public string Subject { get; set; }
    [Parameter]
    public string UrlSubjectName { get; set; }

    List<string> Errors { get; set; } = new();
    List<string> QuestionsRelatedErrors { get; set; } = new();
    AuthenticationState UserAuth { get; set; }
    long NotAuthAnswerId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

        if (Question is null)
        {
            UserAuth = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

            if (UserAuth.User.Identity is not null)
            {
                var username = UserAuth.User.Identity.Name;
                Question = await _dbcontext.questions.FindAsync(QuestionId);

                if (username is not null)
                {
                    IsAuthorized = true;
                    StudentUser = await userManager.FindByNameAsync(username);
                    StudentAnswer = _dbcontext.studentQuestionAnswer.FirstOrDefault
                        (sqa => sqa.studentsId == StudentUser.Id && sqa.questionId == QuestionId);
                }
            }
        }

        try
        {
            if (!IsAuthorized)
            {
                Errors.Add("login to save your answers and to unlock more features to use");
                return;
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Errors.Add(e.Message);
            Errors.Add(e.ToString());
        }



        await base.OnInitializedAsync();
    }


    async Task SubmitAnswer(long ansId)
    {
        if (StudentUser is null)
        {
            return;
        }

        var studentQuestion = new StudentQuestionAnswer()
            {
                answerId = ansId,
                questionId = Question.Id,
                studentsId = StudentUser.Id,
            };

        _dbcontext.studentQuestionAnswer.Add(studentQuestion);
        StudentAnswer = studentQuestion;
        StateHasChanged();
        await _dbcontext.SaveChangesAsync();
    }

    public void EditQuestionPage()
    {
        navigation.NavigateTo(navigation.BaseUri + "EditQuestion/" + Question.Id, true, true);
    }

    async Task ResetQuestionAnswer()
    {
        if (StudentAnswer is not null)
        {
            _dbcontext.studentQuestionAnswer.Remove(StudentAnswer);
            StudentAnswer = null;
            await _dbcontext.SaveChangesAsync();
            StateHasChanged();
        }
    }

}