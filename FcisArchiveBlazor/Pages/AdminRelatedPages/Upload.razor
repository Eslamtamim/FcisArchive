@page "/Upload"
@using FCISQuestionsHub.Core.Models.UploadingModels;

@inject IMemoryCache cache
@inject SignInManager<StudentUser> signInManager
@inject ApplicationDbContext _dbcontext
@inject AuthenticationStateProvider GetAuthenticationStateAsync


<AuthorizeView Roles="Admin, Super-Admin">
    <Authorized>

        <div class=" col-4 my-3">
            <InputFile OnChange="UploadFiles" multiple class="form-control"/>
        </div>
        <EditForm Model="Subject" Context="uploadContext" OnSubmit="UploadPdf" class="col-4">
            <div class="d-flex flex-row justify-content-between gap-2 rounded-2 m-2 p-2">
                <div>
                    @foreach (var year in Enum.GetValues(typeof(Year)).Cast<Year>())
                    {
                        <div @onclick="() => { Subject.Year = year; }" >
                            <input class="form-check-input" type="radio" Name="year" value="@year"/>
                            <lable>@year year</lable>
                        </div>
                    }
                </div>
                <div class="justify-content-end">
                    @foreach (var semester in Enum.GetValues(typeof(Semester)).Cast<Semester>())
                    {
                        <div @onclick="() => { Subject.Semester = semester; }">
                            <input class="form-check-input" type="radio" Name="semester" value="@semester"/>
                            <lable>@semester Semester</lable>
                        </div>
                    }
                </div>
            </div>
            <label>Author Name</label>
            <InputText DisplayName="Author" @bind-Value="AuthorName" class="form-control"></InputText>
            <button class="btn my-2 btn-success" type="submit">Upload</button>
        </EditForm>


        @switch (UploadState)
        {
            case States.Done:
            {
                <div class="alert m-5 alert-success" role="alert">
                    <p>
                        Done @QuestionsThatGotUploaded.Count() / @NumberOfQuestions
                    </p>
                    @if (FilesDone.Count > 0)
                    {
                        foreach (var file in FilesDone)
                        {
                            <p>(@file) got uploaded 🥳</p>
                        }
                    }
                    <p>
                        Error Rate @Errors.Count()
                    </p>
                </div>
                break;
            }
            case States.Error:
                <div class="alert m-5 alert-danger" role="alert">
                    Error
                </div>
                break;
            case States.Loading:
            {
                <div class="alert m-5 alert-secondary" role="alert">
                    Loading... @QuestionsThatGotUploaded.Count() / @NumberOfQuestions from @Filename
                    <br/>
                    @if (FilesDone.Count > 0)
                    {
                        foreach (var file in FilesDone)
                        {
                            <p>@file Done ✔</p>
                        }
                    }
                    Error Rate @Errors.Count()
                </div>
                break;
            }
            case States.Idle:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        @if (Errors.Any())
        {
            foreach (var error in Errors.Where(error => error.Any()))
            {
                <div>
                    <details class="my-3">
                        <summary class="alert-danger d-inline fw-bold">
                            <div>
                                @foreach (var item in @error.First().Split('\n'))
                                {
                                    @item
                                    <br/>
                                }
                            </div>
                        </summary>
                        <br/>
                        @for (int i = 1; i < error.Count(); i++)
                        {
                            <p class="alert m-5 alert-danger" role="alert">
                                @error[i];
                            </p>
                        }
                    </details>
                </div>
            }
        }
        <ListOfUploads/>
    </Authorized>
    <NotAuthorized>
        <h3>You are not allowed to view this page, if you think otherwise contact <a target="_blank" href="https://t.me/mimatmalxe">Tamim(mimatmalxe)</a></h3>
        <h4 class="text-danger">This page is coming soon for all users, Just working on it...</h4>
    </NotAuthorized>
</AuthorizeView>


@code {

    enum States
    {
        Done,
        Error,
        Loading,
        Idle
    }

    int NumberOfQuestions { get; set; } = 0;
    readonly long _maxFileSize = 1024 * 1024 * 15;
    string Filename { get; set; }
    string UserId { get; set; }
    string AuthorName { get; set; }
    Subject Subject { get; set; } = new();
    Lecture Lecture { get; set; } = new();
    PdfUploads UploadsModel { get; set; } = new();
    InputFileChangeEventArgs _uploadFiles;
    List<List<string>> Errors { get; set; } = new();
    List<Question> QuestionsThatGotUploaded { get; set; } = new();
    List<string> FilesDone { get; set; } = new();
    List<FileErrors> FileErrors = new();
    States UploadState { get; set; } = States.Idle;
    AuthenticationState UserAuth { get; set; }


    protected override async Task OnInitializedAsync()
    {
        UserAuth = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = UserAuth.User.Identity?.Name;
        if (userName != null)
        {
            UserId = _dbcontext.Users.FirstOrDefault(u => u.UserName == userName)?.Id;
        }
        await base.OnInitializedAsync();
    }

    void UploadFiles(InputFileChangeEventArgs e)
    {
        _uploadFiles = e;
    }

    async Task<bool> UploadPdf()
    {
        if (_uploadFiles is null)
        {
            Errors.Add(new List<string> { { "please add a file" } });
            StateHasChanged();
            return false;
        }
        if (Subject.Year is 0 || Subject.Semester is 0)
        {
            Errors.Add(new List<string> { { "please select the year and the semester" } });
            StateHasChanged();
            return false;
        }

        UploadsModel.RequestId = Guid.NewGuid().ToString();
        UploadsModel.UserId = UserId;

        _dbcontext.PdfUploads.Add(UploadsModel);

        await _dbcontext.SaveChangesAsync();
        Errors.Clear();
        NumberOfQuestions = 0;
        QuestionsThatGotUploaded.Clear();
        FilesDone.Clear();


        List<FileUpload> fileUploads = new();
        if (fileUploads == null) throw new ArgumentNullException(nameof(fileUploads));

        foreach (var file in _uploadFiles.GetMultipleFiles(50))
        {
    //FileErrors = new();

            UploadState = States.Loading;

            if (file.Size == 0)
            {
                UploadState = States.Error;
                break;
            }
            Filename = file.Name;
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "PdfFiles", Filename);

            var isFileValid = await ValidatingFileAsync(file, filePath);
            if (!isFileValid) continue;


            FileUpload fileUpload = new()
            {
                RequestID = UploadsModel.RequestId,
                FileName = Filename,
                FileSize = (int)file.Size,
            };
            fileUploads.Add(fileUpload);
            _dbcontext.FileUploads.Add(fileUpload);
            var fileUploadSaving = await _dbcontext.SaveChangesAsync();

            var text = PDFtoText.pdfText(filePath);
            var regexPattern = @"(\d+)\)([\s\S]*?)\(Slide\s(.+?)\)";
            Regex regex = new Regex(regexPattern);
            MatchCollection matches = regex.Matches(text);

            NumberOfQuestions += matches.Count();


    // initializing the subject and the lecture

            AddingSubjectAndLecture(filePath, fileUploadSaving, fileUpload.FileId);

    // start working with the regex regexResult
            foreach (Match match in matches)
            {
                var regexResult = match.Value.Trim().Split('\n').ToList();
                Question question = new Question();

    // initializing the question
                bool stateOfTheQuestion = AddingQuestion(regexResult, ref question, fileUploadSaving, fileUpload.FileId);
                if (stateOfTheQuestion is false) continue;

    // removing the question text and the hint from the list of the regex regexResult to end up with just the answers
                regexResult.Remove(regexResult.First());
                regexResult.Remove(regexResult.Last());


    // adding the question to the database and updating the cache and the ui
                var statesOfTrimmingTheRegexResult = TrimmingTheRegexResult(regexResult, ref question, fileUploadSaving, fileUpload.FileId, file.Name);
                if (statesOfTrimmingTheRegexResult is false) continue;

    // deciding the question type - i know it's bad as fuck, but until i find a better way;
                if (regexResult.Count() == 2 && regexResult.First().Contains("T") && regexResult.First().Trim().Length <= 6) question.QuestionType = QuestionType.TrueFalse;
                else question.QuestionType = QuestionType.MCQ;

    // initializing the answers
                AddingAnswers(regexResult, ref question, fileUploadSaving, fileUpload.FileId);

                ClearCache(question);
            }

            FilesDone.Add(Filename);
            if (File.Exists(filePath)) File.Delete(filePath);
        }
        UploadState = States.Done;
        Subject = new Subject();

    // to do : release the memory after u finish with the function
        return true;
    }


    async Task<bool> ValidatingFileAsync(IBrowserFile file, string filePath)
    {
        Filename = file.Name;
    // making sure the file is a pdf and its size is less that 15MB;
        if (file.Size > _maxFileSize)
        {
            Errors.Add(new() { { $"File is Size is {file.Size / 1024 / 1024} MB, this is more than the 15 MB Limit" } });
            if (File.Exists(filePath)) File.Delete(filePath);
            return false;
        }
        if (Filename[Filename.LastIndexOf('.')..] != ".pdf")
        {
            Errors.Add(new List<string> { { $"File ({Filename}) Must be A PDF" } });
            if (File.Exists(filePath)) File.Delete(filePath);
            return false;
        }
        try
        {
            await using FileStream fs = new(filePath, FileMode.Create);
            await file.OpenReadStream(_maxFileSize).CopyToAsync(fs);
        }
        catch (Exception e)
        {
            List<string> currentFileErrors = new()
            {
                "An Error happened while opening the file or trying to copy, try again or contact the Admin",
                e.Message,
                e!.ToString()
            };
            if (File.Exists(filePath)) File.Delete(filePath);
            Errors.Add(currentFileErrors);
            currentFileErrors.Clear();
            return false;
        }
        return true;
    }

    void AddingSubjectAndLecture(string filePath, int fileUploadSaving, int fileUploadId)
    {
        try
        {
            string normalizedFileName = GetNormalizedFileName(filePath);
    // adding the subject to the database and updating the cache and the ui

            Subject.Name = normalizedFileName.Split('-').First();
            Subject temp = _dbcontext.subjects.FirstOrDefault(s => s.Name == Subject.Name);
            if (temp is null)
            {
                try
                {
                    _dbcontext.subjects.Add(Subject);
                    _dbcontext.SaveChanges();
                }
                catch (Exception ex)
                {
                    SaveErrorsToDb(ex, fileUploadSaving, fileUploadId);
                }
            }
            else
            {
                Subject = temp;
            }

            Lecture = new()
            {
                SubjectId = Subject.Id,
                UploaderId = UserId,
                Name = normalizedFileName,
            };
            _dbcontext.lectures.Add(Lecture);

            _dbcontext.SaveChanges();
        }
        catch (Exception ex)
        {
            SaveErrorsToDb(ex, fileUploadSaving, fileUploadId);
        }
    }

    string GetNormalizedFileName(string filePath)
    {
        int indexOfTheStartOfTheFileName = (filePath.LastIndexOf('\\') + 1);
        var subjectFileName = filePath[indexOfTheStartOfTheFileName..];
        subjectFileName = subjectFileName[..(subjectFileName.LastIndexOf('-'))];
        if (!subjectFileName.ToLower().Contains("all"))
        {
            string fileNumber = subjectFileName.Split('-')[1][3..];
            subjectFileName = $"{subjectFileName.Split('-')[0]}-{subjectFileName.Split('-')[1][..3]}-{fileNumber}";
        }
        return subjectFileName;
    }

    bool AddingQuestion(List<string> regexResult, ref Question question, int fileUploadSaving, int fileUploadId)
    {
        try
        {
            question = new Question()
            {
    //filePath, /* filePath.Substring(filePath.LastIndexOf('\\')+1, filePath.LastIndexOf('.')),*/ // filePath[(filePath.LastIndexOf('\\') + 1)..],
                SubjectId = Subject.Id,
                LectureId = Lecture.Id,
                Text = regexResult.First(),
                AuthorName = AuthorName,
                Hint = regexResult.Last(),
            };
        }

        catch (Exception ex)
        {
            Exception e = new(ex.Message + $"error happened while adding the \n question : \"{question.Text}\"  try adding it manually", ex.InnerException)
            {
                Source = ex.Source
            };
            List<string> currentFileErrors = new()
            {
                ex.Message,
                ex!.ToString()
            };
            Errors.Add(currentFileErrors);
            SaveErrorsToDb(e, fileUploadSaving, fileUploadId);
            return false;
        }
        return true;
    }

    bool TrimmingTheRegexResult(List<string> regexResult, ref Question question, int fileUploadSaving, int fileUploadId, string fileName)
    {
        if (regexResult == null) throw new ArgumentNullException(nameof(regexResult));
        try
        {
    // making sure that the rest of the regex answers doesn't contain garbage strings
            while (regexResult.Any() && (regexResult.First().Length < 2 || regexResult.First()[1] != ')'))
            {
                question.Text += regexResult.First();
                regexResult.Remove(regexResult.First());
            }

            QuestionsThatGotUploaded.Add(question);
            _dbcontext.questions.Add(question);
            _dbcontext.SaveChanges();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Exception e = new(ex.Message + $"error happened while adding the \n question : \"{question.Text}\" \n in the file \'{fileName}\' try adding it manually", ex.InnerException)
            {
                Source = ex.Source
            };
            List<string> currentFileErrors = new()
            {
                $"error happened while adding the \n question : \"{question.Text}\" \n in the file \'{fileName}\' try adding it manually",
                ex.Message,
                ex!.ToString()
            };
            _dbcontext.questions.Remove(question);
            SaveErrorsToDb(e, fileUploadSaving, fileUploadId);
            Errors.Add(currentFileErrors);
            return false;
        }
        return true;
    }

    void AddingAnswers(List<string> regexResult, ref Question question, int fileUploadSaving, int fileUploadId)
    {
        foreach (var ans in regexResult)
        {
            Answer answer = new Answer();
            try
            {
                answer = new Answer()
                {
                    Text = ans,
                    IsCorrect = false,
                    QuestionId = question.Id
                };

                var lengthOfAnswerText = ans.Length;
                var indexOfTheStarIndicator = ans.LastIndexOf('*');
                if (indexOfTheStarIndicator > 0 && lengthOfAnswerText - indexOfTheStarIndicator <= 3)
                {
                    answer.IsCorrect = true;
                    answer.Text = ans[..indexOfTheStarIndicator];
                }
                _dbcontext.answers.Add(answer);
                _dbcontext.SaveChanges();
            }
            catch (Exception ex)
            {
                Exception e = new(ex.Message + $"error happened while adding the an answer: {answer.Text} to the question {question.Text} try adding it manually", ex.InnerException)
                {
                    Source = ex.Source
                };

                List<string> currentFileErrors = new()
                {
                    $"error happened while adding the an answer: {answer.Text} to the question {question.Text} try adding it manually",
                    ex.Message,
                    ex!.ToString()
                };
                SaveErrorsToDb(ex, fileUploadSaving, fileUploadId);
                Errors.Add(currentFileErrors);
                continue;
            }
        }
    }


    void SaveErrorsToDb(Exception ex, int fileUploadSaving, int fileUploadId)
    {
        if (fileUploadSaving == 0) return;
        if (ex.InnerException != null)
        {
            FileErrors fileError = new()
            {
                ErrorTitle = ex.Source,
                ErrorMessage = ex.Message,
                ErrorDescription = ex.InnerException.Message,
                FileId = fileUploadId
            };
            FileErrors.Add(fileError);
            _dbcontext.FileErrors.Add(fileError);
        }
        _dbcontext.SaveChanges();
    }

    void ClearCache(Question question)
    {
        try
        {
            cache.Remove("years");
            cache.Remove("subjects" + Subject.Year);
            cache.Remove("lectures" + Subject.Name);
            cache.Remove("questionCount" + Lecture.Name);
            cache.Remove('q' + Lecture.Name);
        }
        catch (Exception ex)
        {
            List<string> strings = new()
            {
                "Couldn't clear cache for " + question.Text,
                ex.Message
            };
            if (ex.InnerException != null) strings.Add(ex.InnerException.Message);
            Errors.Add(strings);
            StateHasChanged();
        }
    }


}