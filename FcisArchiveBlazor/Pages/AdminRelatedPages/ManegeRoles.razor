@page "/Admin/ManageRoles"

@inject UserManager<StudentUser> userManager
@inject SignInManager<StudentUser> signInManager
@inject RoleManager<IdentityRole> roleManager
@inject ApplicationDbContext _dbcontext


<AuthorizeView>
    <Authorized>
        <h3>Manage Roles</h3>

        <div class="d-flex justify-content-around">

            <EditForm Context="editContext" Model="_RoleDto" OnValidSubmit="AddRole">
                <DataAnnotationsValidator/>
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <label>Role Name</label>
                        <InputText class="form-control" @bind-Value="_RoleDto.RoleName"></InputText>
                        <ValidationMessage For="() => _RoleDto.RoleName"/>
                        <br/>
                        <button type="submit" class="btn btn-primary">Submit Role</button>
                    </div>
                </div>

                <div>
                    @if (SavedChanges.Any())
                    {
                        <ul>
                            <li class="m-1 d-inline-block alert-success">@SavedChanges.Last()</li>
                        </ul>
                    }
                </div>

            </EditForm>

            <div class="d-flex flex-column">

                @foreach (var role in Roles)
                {
                    <div class="bg-gradient bg-warning bg-opacity-25">

                        <div class="m-2">

                            @if (InEditMood)
                            {
                                <EditForm Model="role" Context="roleContext" OnValidSubmit="async () =>{InEditMood = !InEditMood;await UpdateRole(role);}">
                                    <DataAnnotationsValidator/>
                                    <InputText class="form-control" @bind-Value="@role.Name"></InputText>

                                    <ValidationMessage For="() => _RoleDto.RoleName"/>
                                </EditForm>
                            }
                            else
                            {
                                <p>@role.Name</p>
                            }
                        </div>

                        <div>

                            <button class="btn btn-danger" @onclick="async () => { await DeleteRole(role); }">Delete Role</button>
                            <button class="btn btn-secondary" @onclick="() => { InEditMood = !InEditMood; }">Update Role</button>
                            <button class="btn btn-outline-primary" @onclick="async () => { await ShowRole(role); }">Role Details</button>
                        </div>
                    </div>
                }

            </div>

        </div>

        <div>

            @if (Errors.Any())
            {
                foreach (var error in Errors)
                {
                    <p class="text-danger"> @error.Message</p>
                    <div class="text-danger"> @error.InnerException</div>
                }
            }

        </div>

        @if (Role is not null)
        {
            <div class="my-5 mx-2">

                <p>role ID : @Role.Id</p>
                <h3>@Role.Name Role</h3>

                <EditForm Model="_User" Context="userContext" OnValidSubmit="AddUserRole">
                    <label>add users to this Role</label>
                    <InputSelect class="form-select" @bind-Value="_User.Id">
                        <option value=""></option>
                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    </InputSelect>
                    <button class="btn btn-primary my-2" type="submit">Add User</button>
                </EditForm>


                <table class="table">
                    @{
                        var num = 1;
                    }
                    <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">UserName</th>
                        <th scope="col">ID</th>
                        <th scope="col">Actions</th>
                    </tr>
                    </thead>
                    @foreach (var user in RoleUsers)
                    {
                        <tr>
                            <th scope="row">@(num++)</th>
                            <td>@user.Username</td>
                            <td>@user.Id</td>
                            <td>
                                <button @onclick="async () => { await DeleteUserRole(new IdentityUserRole<string>() { RoleId = Role.Id, UserId = user.Id }); }"
                                        class="btn w-50 btn-outline-danger oi oi-delete">
                                </button>
                            </td>
                        </tr>
                    }
                </table>


            </div>
        }


    </Authorized>


    <NotAuthorized>
        <h3 class="text-danger">You are not allowed to view this page, if you think otherwise contact <a target="_blank" href="https://t.me/mimatmalxe">Tamim(mimatmalxe)</a></h3>

    </NotAuthorized>

</AuthorizeView>

@code {

    class User
    {
        public string Id { get; set; }
        public string Username { get; set; }
    }

    class RoleDto
    {
        [Required(ErrorMessage = "Role Name is required.")]
        [MaxLength(50, ErrorMessage = "Role Name Should be at least of len 2 and at most 50")]
        [MinLength(2, ErrorMessage = "Role Name Should be at least of len 2 and at most 50")]
        public string RoleName { get; set; }
    }


    // things to do with the role maneging
    RoleDto _RoleDto { get; set; } = new();
    IdentityRole Role { get; set; }
    List<IdentityRole> Roles { get; set; } = new();

    // users to a role things
    List<User> RoleUsers { get; set; } = new();
    List<User> Users { get; set; } = new();
    User _User { get; set; } = new();

    // just general things
    Queue<string> SavedChanges { get; set; } = new();
    List<Exception> Errors { get; set; } = new();
    bool InEditMood { get; set; } = false;


    protected override async Task OnParametersSetAsync()
    {
        Roles = await _dbcontext.Roles.ToListAsync();
        await base.OnParametersSetAsync();
    }

    async Task ShowRole(IdentityRole role)
    {
        this.Role = role;

    //get all the users of the app to assign them to a role if needed
        Users = await _dbcontext.Users.Select(e => new User { Id = e.Id, Username = e.UserName }).ToListAsync();

    // users of the role to show
        RoleUsers = await _dbcontext.UserRoles.Where(r => r.RoleId == role.Id).Join(_dbcontext.Users, ur => ur.UserId, u => u.Id,
            (ur, u) => new User { Id = u.Id, Username = u.UserName }).ToListAsync();
    }


    async Task AddRole()
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            await roleManager.CreateAsync(new IdentityRole(_RoleDto.RoleName));
            await _dbcontext.SaveChangesAsync();
            Roles = await _dbcontext.Roles.ToListAsync();
            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Added Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


    async Task UpdateRole(IdentityRole role)
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            await roleManager.UpdateAsync(role);
            await roleManager.UpdateNormalizedRoleNameAsync(role);
            await _dbcontext.SaveChangesAsync();
            Roles = await _dbcontext.Roles.ToListAsync();
            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Updated Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


    async Task DeleteRole(IdentityRole role)
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            _dbcontext.Roles.Remove(role);
            await _dbcontext.SaveChangesAsync();
            Roles = await _dbcontext.Roles.ToListAsync();

            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Deleted Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


    async Task AddUserRole()
    {
        if (string.IsNullOrEmpty(_User.Id))
        {
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("You Can't Leave This Empty, please Choose a user");
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
            return;
        }
        else
        {
            _User.Username = (await _dbcontext.Users.FindAsync(_User.Id))?.UserName;
        }

        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            await _dbcontext.UserRoles.AddAsync(new IdentityUserRole<string>() { UserId = _User.Id, RoleId = Role.Id });
            await _dbcontext.SaveChangesAsync();
            RoleUsers = await _dbcontext.UserRoles.Where(r => r.RoleId == Role.Id).Join(_dbcontext.Users, ur => ur.UserId, u => u.Id,
                (ur, u) => new User { Id = u.Id, Username = u.UserName }).ToListAsync();

            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Added Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }

    async Task DeleteUserRole(IdentityUserRole<string> userRole)
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            _dbcontext.UserRoles.Remove(userRole);
            await _dbcontext.SaveChangesAsync();
            RoleUsers = await _dbcontext.UserRoles.Where(r => r.RoleId == Role.Id).Join(_dbcontext.Users, ur => ur.UserId, u => u.Id,
                (ur, u) => new User { Id = u.Id, Username = u.UserName }).ToListAsync();
            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("deleted Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


}