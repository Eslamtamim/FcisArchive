@using FCISQuestionsHub.Core.Models.UploadingModels;
@page "/Upload/{RequestId}"
@inject NavigationManager nav
@inject IMemoryCache cache
@inject SignInManager<StudentUser> signInManager
@inject ApplicationDbContext _dbcontext
@inject AuthenticationStateProvider GetAuthenticationStateAsync


<div class="d-flex justify-content-between align-items-center">
    <h3>UploadDetails</h3>
    <button class="btn btn-danger" @onclick="DeleteUploadContent"> Delete The Changes From This Upload</button>
</div>

@if (pdfUploads != null)
{
    <h5 class="card-title">Upload Id: <span class="alert-warning">@pdfUploads.RequestId</span></h5>
    <h6 class="card-subtitle mb-2 text-muted">Uploaded in @pdfUploads.TimeUploaded.AddHours(3).ToShortDateString()</h6>

    <table class="table">
        <thead>
            <tr>
                <th scope="col">File Name</th>
                <th scope="col">File Size</th>
                <th scope="col">Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in pdfUploads.Files)
            {
                <tr>
                    <td>@file.FileName</td>
                    <td>@((file.FileSize) / (1024)) KB</td>
                    <td>
                        <a class="btn btn-outline-primary" href="/Upload/@RequestId/@file.FileId">Go to Details</a>
                        <button class="btn btn-outline-danger" @onclick="async () => { await DeleteFile(file); }">Delete File Questions</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h3 class="text-danger">No Uploads Found</h3>
}


@code {

    [Parameter]
    public string RequestId { get; set; }

    PdfUploads pdfUploads = new();
    public AuthenticationState userAuth { get; set; }

    protected override Task OnInitializedAsync()
    {
        userAuth = GetAuthenticationStateAsync.GetAuthenticationStateAsync().Result;

        string UserName = userAuth.User.Identity?.Name;
        StudentUser user = _dbcontext.Users.FirstOrDefault(u => u.UserName == UserName);
        pdfUploads = _dbcontext.PdfUploads.Include(p => p.Files).FirstOrDefault(f => f.RequestId == RequestId && user.Id ==
                                                                                     f.UserId);
        return base.OnInitializedAsync();
    }

    async Task DeleteUploadContent()
    {
        List<string> lecsNames = new();
        foreach (var file in pdfUploads.Files)
        {
            lecsNames.Add(GetNormalizedFileName(file.FileName));
        }

        foreach (var lectureName in lecsNames)
        {
            try
            {
                var lec = _dbcontext.lectures.FirstOrDefault(q => q.Name == lectureName);
                if (lec == null) continue;
                _dbcontext.lectures.Remove(lec);
                var lecture = _dbcontext.lectures.FirstOrDefault(l => l.Name == lectureName);
                var subject = _dbcontext.subjects.FirstOrDefault(s => s.Id == lecture.SubjectId);
                // clearing the cache
                await ClearCache(subject, lecture);
            }
            catch (Exception)
            {

            }
        }
        _dbcontext.PdfUploads.Remove(pdfUploads);
        await _dbcontext.SaveChangesAsync();
        nav.NavigateTo("/upload");
    }

    async Task DeleteFile(FileUpload file)
    {
        var lectureName = GetNormalizedFileName(file.FileName);

        var lec = _dbcontext.lectures.FirstOrDefault(q => q.Name == lectureName);
        if (lec != null)
        {
            _dbcontext.lectures.Remove(lec);
        }
        pdfUploads.Files.Remove(file);

        try
        {

            var lecture = _dbcontext.lectures.FirstOrDefault(l => l.Name == lectureName);
            var subject = _dbcontext.subjects.FirstOrDefault(s => s.Id == lecture.SubjectId);
            // clearing the cache
            await ClearCache(subject, lecture);

            await _dbcontext.SaveChangesAsync();
        }
        catch (Exception)
        {

        }
        StateHasChanged();
    }

    static string GetNormalizedFileName(string filePath)
    {
        string subjectFileName = "";
        try
        {

            int indexOfTheStartOfTheFileName = (filePath.LastIndexOf('\\') + 1);
            subjectFileName = filePath[indexOfTheStartOfTheFileName..];
            subjectFileName = subjectFileName[..(subjectFileName.LastIndexOf('-'))];


            if (!subjectFileName.ToLower().Contains("all"))
            {
                if (subjectFileName.ToLower().Contains("lec"))
                {
                    string fileNumber = subjectFileName.Split('-')[1][3..];
                    subjectFileName = $"{subjectFileName.Split('-')[0]}-{subjectFileName.Split('-')[1][..3]}-{fileNumber}";

                }
                else
                {
                    subjectFileName = $"{subjectFileName.Split('-')[0]}-{subjectFileName.Split('-')[1]}";
                }
            }
        }
        catch (Exception)
        {

        }
        return subjectFileName;

    }

    async Task ClearCache(Subject subject, Lecture lecture)
    {
        try
        {

            cache.Remove("years");
            cache.Remove("subjects" + (int)subject.Year);
            cache.Remove("lectures" + subject.Name);
            // clearing the cache for the pagination
            var questionCount = await _dbcontext.questions.Where(q => q.LectureId == lecture.Id).LongCountAsync();
            var pages = (decimal)questionCount / 20;
            pages = Math.Ceiling(pages);
            foreach (var page in Enumerable.Range(1, (int)pages))
            {
                cache.Remove($"p{page}" + lecture.Name);
            }
        }
        catch (Exception ex)
        {
            List<string> strings = new()
            {
              //  "Couldn't clear cache for " + question.Text,
                ex.Message
            };
            if (ex.InnerException != null) strings.Add(ex.InnerException.Message);
            //  Errors.Add(strings);
            StateHasChanged();
        }
    }


}

