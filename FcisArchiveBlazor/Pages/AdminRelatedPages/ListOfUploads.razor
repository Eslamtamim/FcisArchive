@using FCISQuestionsHub.Core.Models.UploadingModels;

@inject IMemoryCache cache
@inject SignInManager<StudentUser> signInManager
@inject ApplicationDbContext _dbcontext
@inject AuthenticationStateProvider GetAuthenticationStateAsync


<h3 class="m-4">ListOfUploads</h3>
@if (_uploads is not null)
{
    <div class="col-12">

        <div class="d-flex justify-content-around align-items-center gap-2  flex-wrap">

            @if (_uploads.Count > 0)
            {
                foreach (var upload in _uploads)
                {
                    <a class="card my-2 btn" style="width: 19rem;" href="/Upload/@upload.RequestId">

                        <div class="card-body">
                            <h5 class="my-3 card-title">Upload Id: <span class="alert-warning">@upload.RequestId</span></h5>

                            <h6 class="card-subtitle mb-2 text-muted">
                                Uploaded at @upload.TimeUploaded.AddHours(3).ToShortTimeString()
                                in @upload.TimeUploaded.ToShortDateString()
                            </h6>
                            @* <p class="card-text">
                                Some Of The Upload Content
                                <ul>
                                    @foreach (var file in upload.Files)
                                    {
                                        <li class="alert-success d-inline ">
                                            >    @file.FileName
                                        </li>
                                    }
                                </ul>
                            </p> *@
                        </div>
                    </a>
                }
            }

        </div>

    </div>
}

else
{
    <Loading/>
}

@code {

    List<PdfUploads> _uploads;
    Exception _exception;
    AuthenticationState UserAuth { get; set; }

    protected override Task OnInitializedAsync()
    {
        try
        {
            UserAuth = GetAuthenticationStateAsync.GetAuthenticationStateAsync().Result;
            var userName = UserAuth.User.Identity?.Name;
            var user = _dbcontext.Users.FirstOrDefault(u => u.UserName == userName);
            
            _uploads = _dbcontext.PdfUploads.Where(pdf => pdf.UserId == user.Id)
                .OrderByDescending(f => f.TimeUploaded)
                .ToList();
            return base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _exception = ex;
        }

        return base.OnInitializedAsync();
    }

}