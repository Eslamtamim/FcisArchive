@page "/s/{subject}/{UrlSubjectName}"
@inject IUnitOfWork unitOfWork_
@inject SignInManager<StudentUser> si
@inject NavigationManager navigation
<div>


	<br />
	<div class="d-flex align-content-between justify-content-between">
		<h1 class="fw-bold">Questions On Lec @(UrlSubjectName.Split('-')[2] == "1000" ? "All" : UrlSubjectName.Split('-')[2])</h1>
		
		<div>
			<button class="btn d-inline btn-danger"  @onclick="DeleteQuestionsBySubject">Delete This Lecute</button>

		</div>
	</div>

	@if (errors.Any())
	{
		@foreach (var error in errors)
		{
			<p class="my-0 text-danger">@error</p>
		}
		<div class="d-flex m-3">
			<a class="btn mx-3 btn-secondary" href="Account/Register">Register</a>
			<a class="btn btn-outline-secondary " href="Account/Login">Log in</a>
		</div>
	}
	@if (FilterdQuestions is null)
	{
		<h1>loading...</h1>
	}
	else if (FilterdQuestions!.Count() == 0)
	{
		<div class="alert alert-danger" role="alert">
			no questions yet
		</div>

	}
	else
	{
		<div class="d-flex justify-content-end ">
			<p style="font-size: 25px " class="fw-bolder">Amount of Questions : <span class="alert-info">  @FilterdQuestions!.Count() </span></p>
		</div>
		foreach (var question in FilterdQuestions!)
		{
			<QuestionCard Question="@question" />
		}
	}

</div>




@code {

	[Parameter]
	public string UrlSubjectName { get; set; }
	[Parameter]
	public string subject { get; set; }
	public List<Question> FilterdQuestions { get; set; }
	public List<Question> every { get; set; }
	List<string> errors = new List<string>();

	protected async override Task OnInitializedAsync()
	{

		if (si.Context.User.Identity!.Name is null)
		{
			errors.Add("you are not logged in");
			errors.Add("login to submit your answers");
		}
		FilterdQuestions = await GetQuestions(UrlSubjectName);
		await base.OnInitializedAsync();
	}


	async Task<List<Question>> GetQuestions(string UrlSubjectName)
	{
		try
		{

			if (UrlSubjectName is null || UrlSubjectName == "")
			{
				return new List<Question>();
			}
			var result = await unitOfWork_.questions.FindMany(q => q.Subject == UrlSubjectName);
			if (result is null) return new List<Question>();

			return result.OrderBy(q => q.Subject).ThenBy(q => q.Id).ToList();
		}
		catch (Exception e)
		{
			errors.Add(e.Message);
			return new List<Question>();
		}
	}

	async Task DeleteQuestionsBySubject()
	{
		var qs = await unitOfWork_.questions.FindMany(q => q.Subject == UrlSubjectName);
		unitOfWork_.questions.DeleteMany(qs);
		await unitOfWork_.SaveChangesAsync();
		 navigation.NavigateTo(navigation.BaseUri,true,true);
	}

}