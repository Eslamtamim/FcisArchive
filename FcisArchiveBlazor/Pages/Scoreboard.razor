@page "/scoreboard"
@using Microsoft.AspNetCore.Mvc;
@inject ApplicationDbContext _context
@inject AuthenticationStateProvider GetAuthenticationStateAsync


<!DOCTYPE html>
<html>

<head>
    <title>Scoreboard</title>
</head>

<body>



    <h3>Scoreboard</h3>
    <span class="small" style="font-size:0.8rem;">
        Users : <span class="fw-bolder" style="color:red;">@CountUsers </span>
        &emsp; &emsp;
        Questions Solved : <span class="fw-bolder" style="color:red;">@CountQuestionsSolved </span>
    </span>

    <div class=" ScoreContent m-2">

        <div class="d-flex gap-3" >  
            @foreach (var table in UsersDisplayed)
            {
                var currTable = UsersDisplayed[table.Key];
                if (currTable.Count == 0)
                {
                    if (AllTables[table.Key].Count == 0) continue;
                    currTable = AllTables[table.Key];
                }
             <div>
                    <h5>@table.Key Year </h5>
                  <table style=" max-width: 25rem;min-width: 15rem;">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Name</th>
                                <th>Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int i = 1;
                            }
                            @foreach (var currUser in currTable)
                            {
                                string color = ColorOfName(currUser.QuestionsSolved);
                                <tr style=" @(currUser.QuestionsSolved >= 1000  ? $"color:{color};font-weight:bold;" : "") "
                                    class="">
                                    <td>@(i++) @(i == 2 ? " 🥇" : "") @(i == 3 ? " 🥈" : "") @(i == 4 ? " 🥉" : "") </td>
                                    <td>
                                        @(currUser.DisplayName ?? currUser.FirstName + " " + currUser.LastName)


                                        @if (table.Key == Year.Second)
                                        {
                                            var con = mostSolvedSubject.TryGetValue(currUser.Id, out var mss);
                                            if (con)
                                            {

                                                <span style="color: rgb(0, 0, 0); font-weight: bold; font-size: 0.8rem;">
                                                    
                                                    @(" {")

                                                    @(mss?.SubjectName ==  "DataStructure&Algorithms" ? "DSA": mss?.SubjectName ) &#8593; @mss?.Solved @(" }")

                                                </span>
                                            }
                                        }
                                        @if (this.user is not null && currUser.Id == this.user.Id)
                                        {
                                            <span style="color:rgb(112, 25, 25)"> (You)</span>
                                        }
                                    </td>
                                    <td>@currUser.QuestionsSolved</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <br />
                    @if (ShowMore[(int)table.Key])
                    {
                        <button @onclick="()=>{UsersDisplayed[table.Key] = AllTopTables[table.Key];
                            ShowMore[(int)table.Key] = !ShowMore[(int)table.Key]; }">
                            Show Less
                        </button>
                    }
                    else
                    {
                        <button @onclick="()=>{UsersDisplayed[table.Key] = AllTables[table.Key];
                            ShowMore[(int)table.Key] = !ShowMore[(int)table.Key];}">
                            Show More
                        </button>
                    }
                </div>
            }
            <div>

                 <h5>Top Subject &#8594; User This Week</h5>

                  <table style="width: .2rem;">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Subject</th>
                                <th>Score</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var currUser in mostSolvedSubject.Values)
                            {
                                string color = ColorOfName(currUser.Solved);
                                <tr style="font-weight:bold;width: 0.5rem;">
                                    <td>
                                        @(currUser.DisplayName ?? currUser.FirstName + " " +currUser.LastName)
                                        @if (this.user is not null && currUser.id == this.user.Id)
                                        {
                                         <span style="color:rgb(112, 25, 25)"> (You)</span>

                                        }
                                    </td>
                                    <td> @(currUser?.SubjectName ==  "DataStructure&Algorithms" ? "DSA": currUser?.SubjectName)</td>
                                    <td>@currUser.Solved</td>
                                </tr>
                            }
                        </tbody>
                    </table>
            </div>
        </div>

        @if (user is not null)
        {
            <div class="Scoreform  mx-5">
                <EditForm Model="Input" Context="main" OnSubmit="ScoreboardFormSubmit">
                    <label class="form-label">Display Name</label>

                    <div>
                        <InputText @bind-Value="Input.DisplayName" class="form-control" placeholder="scoreboard Name." />

                    </div>

                    <label class="form-label">Academic Year</label>

                    <div>


                        <InputSelect @bind-Value="Input.AcademicYear" class="form-control"
                            placeholder="Please choose Your Academic Year.">
                            <option value="">Your Academic Year</option>

                            @foreach (var item in Enum.GetValues(typeof(Year)))
                            {
                                <option value="@item">@item.ToString()</option>
                            }

                        </InputSelect>
                    </div>

                    <br>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>

            </div>
        }
    </div>




</body>

</html>

@code {

    record User(string Id, string FirstName, string LastName, string UserName, int QuestionsSolved, string DisplayName,
    Department? Department, Year? Year);
    record MostSolvedSubject(string id,string FirstName, string LastName, string DisplayName, string SubjectName, int Solved);
    class ScoreboardForm
    {
        [Required, MaxLength(50)]
        public string DisplayName { get; set; }
        [Required]
        public Year? AcademicYear { get; set; }
        [Required]
        public Department? Department { get; set; }
        [Required]
        public int? Section { get; set; }

    }

    ScoreboardForm Input = new();

    Dictionary<Year, List<User>> AllTables = new();

    Dictionary<Year, List<User>> AllTopTables = new();

    bool[] ShowMore = new bool[5];
    Dictionary<Year, List<User>> UsersDisplayed = new();
    Dictionary<string, MostSolvedSubject> mostSolvedSubject = new();

    StudentUser user;
    int CountUsers;
    int CountQuestionsSolved;
    AuthenticationState UserAuth { get; set; }


    protected override async Task OnInitializedAsync()
    {

        UserAuth = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        mostSolvedSubject = GetMostSolvecSubjects();
        AllTables = new();
        @foreach (var year in Enum.GetValues(typeof(Year)))
        {
            AllTables.Add((Year)year, GetUsers((Year)year));
        }
      
        if (UserAuth.User.Identity is { Name: not null })
        {
            user = _context.Users.FirstOrDefault(e => e.UserName == UserAuth.User.Identity.Name);
            if (user != null)
                Input = new ScoreboardForm
                    {
                        DisplayName = user.DisplayName,
                        AcademicYear = user.AcademicYear,
                        Department = user.Department,
                        Section = user.Section
                    };
        }

        AllTopTables = new();

        @foreach (var year in Enum.GetValues(typeof(Year)))
        {
            AllTopTables.Add((Year)year, AllTables[(Year)year].Where(u => u.QuestionsSolved >= 50).ToList());
        }
        UsersDisplayed = new(AllTopTables);
        // TopUsers = users.Where(u => u.QuestionsSolved >= 50).ToList();
        // ShowingNowUsers = TopUsers;
        // if (TopUsers.Count() == 0) ShowingNowUsers = users;
        UsersDisplayed.Remove(Year.Third);

        CountUsers = _context.Users.Count();
        CountQuestionsSolved = _context.studentQuestionAnswer.Count();


        // users = new List<User>
        // {
        // new User("1", "John", "Doe", "johndoe", 1005,null,null,null),
        // new User("2", "Jane", "Doe", "janedoe", 3400,null,null,null),
        // new User("3", "John", "Smith", "johnsmith", 90000,null,null,null),
        // new User("4", "Jane", "Smith", "janesmith", 2200,null,null,null),
        // new User("5", "John", "Jones", "johnjones", 5000,null,null,null),
        // }.OrderByDescending(e => e.QuestionsSolved).ToList();

        await base.OnInitializedAsync();
    }



    List<User> GetUsers(Year year)
    {

        return (from sqa in _context.studentQuestionAnswer
                join u in _context.Users on sqa.studentsId equals u.Id
                join q in _context.questions on sqa.questionId equals q.Id
                join s in _context.subjects on q.SubjectId equals s.Id
                where s.Year == year
                group u by new { u.Id, u.FirstName, u.LastName, u.UserName, u.DisplayName, u.Department, u.AcademicYear } into g
                orderby g.Count() descending
                select new User(g.Key.Id, g.Key.FirstName, g.Key.LastName, g.Key.UserName, g.Count(), g.Key.DisplayName,
                g.Key.Department, g.Key.AcademicYear)).ToList();

    }

    Dictionary<string, MostSolvedSubject> GetMostSolvecSubjects()
    {
        var mostSolvedSubjects = _context.studentQuestionAnswer
        .Where(sqa => sqa.SubmittedOn >= DateTime.UtcNow.Date.AddDays(-7))
        .GroupBy(sqa => new { sqa.student.Id, sqa.student.FirstName, sqa.student.LastName, sqa.student.DisplayName, sqa.question.Subject.Name })
        .OrderByDescending(g => g.Count())
        .Select(g => new MostSolvedSubject(g.Key.Id, g.Key.FirstName, g.Key.LastName, g.Key.DisplayName, g.Key.Name, g.Count()))
        .ToList();


        @* var mostSolvedSubject = (from sqa in _context.studentQuestionAnswer
join u in _context.Users on sqa.studentsId equals u.Id
join q in _context.questions on sqa.questionId equals q.Id
join s in _context.subjects on q.SubjectId equals s.Id
where sqa.SubmittedOn.Value.Date >= DateTime.Now.Date.AddDays(-5)
group u by new { u.Id, s.Name } into g
orderby g.Count() descending
select new MostSolvedSubject(g.Key.Id, g.Key.Name, g.Count())).ToList(); *@

        var dict = new Dictionary<string, MostSolvedSubject>();

        foreach (var user in mostSolvedSubjects) dict.TryAdd(user.id, user);
        return dict;
    }


    public string ColorOfName(int solvedQuestions)
    {
        if (solvedQuestions >= 1000 && solvedQuestions < 2000) return "#008000";
        else if (solvedQuestions >= 2000 && solvedQuestions < 3000) return "#0000ff";
        else if (solvedQuestions >= 3000 && solvedQuestions < 4000) return "#a0a";
        else if (solvedQuestions >= 4000 && solvedQuestions < 5000) return "#ff8c00";
        else if (solvedQuestions >= 4000 && solvedQuestions < 5000) return "#ff0000";
        else if (solvedQuestions >= 5000) return "#ff0000";
        else return "#000000";
    }
    async void ScoreboardFormSubmit()
    {

        user.DisplayName = Input.DisplayName;
        user.AcademicYear = Input.AcademicYear;
        user.Department = Input.Department;
        user.Section = Input.Section;
        await _context.SaveChangesAsync();
        await this.OnInitializedAsync();
    }

}
