@page "/scoreboard"
@inject ApplicationDbContext _context

<!DOCTYPE html>
<html>
<head>
    <title>Scoreboard</title>
</head>
<body>
    <h3>Scoreboard</h3>

    <table>
        <thead>
            <tr>
                <th>Rank</th>
                <th>User</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @{int i = 0;}
            @foreach(var user in users)
            {
                <tr>
                    <td>@(++i)</td>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.QuestionsSolved</td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>

@code {

    record User(string Id, string FirstName, string LastName, string UserName, int QuestionsSolved);

    List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        // string query = @"select s.""Id"", s.""FirstName"", s.""LastName"", s.""UserName"", COUNT(s.""Id"") as QuestionsSolved
        //                  from ""studentQuestionAnswer"" sqa
        //                  join security.""Users"" s on s.""Id"" = sqa.""studentsId""
        //                  GROUP BY s.""Id""
        //                  ORDER BY QuestionsSolved desc
        //                  LIMIT 10";
        // var queryResult = _context.studentQuestionAnswer.FromSqlRaw(query);

        users = (from sqa in _context.studentQuestionAnswer
                 join s in _context.Users on  sqa.studentsId equals s.Id
                 group s by new { s.Id, s.FirstName, s.LastName, s.UserName } into g
                 orderby g.Count() descending
                 select new User(g.Key.Id, g.Key.FirstName, g.Key.LastName, g.Key.UserName, g.Count())).ToList();

        // users = await _context.studentQuestionAnswer.GroupBy(s => s.student.Id)
        //     .Select(s => new User(s.Key, s.FirstName, s.LastName, s.UserName, s.QuestionsSolved))
        //     .OrderByDescending(s => s.QuestionsSolved)
        //     .Take(10)
        //     .ToListAsync();

        await base.OnInitializedAsync();
    }


}
