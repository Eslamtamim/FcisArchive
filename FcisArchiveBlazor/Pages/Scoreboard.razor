@page "/scoreboard"
@inject ApplicationDbContext _context

<!DOCTYPE html>
<html>
<head>
    <title>Scoreboard</title>
</head>
<body>
    <h3>Scoreboard</h3>

    <table>
        <thead>
            <tr>
                <th>Rank</th>
                <th>Full Name</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @{int i = 1;}
            @foreach(var user in users)
            {
                <tr style=" @(user.QuestionsSolved >= 1000  ? "color:#008000;font-weight:bold;" : "") " class="">
                    <td>@(i++) @(i == 2 ? "  🥇" : "") @(i == 3 ? "  🥈" : "") @(i == 4 ? "  🥉" : "") </td>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.QuestionsSolved</td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>

@code {

    record User(string Id, string FirstName, string LastName, string UserName, int QuestionsSolved);

    List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
       
        
        
        users = (from sqa in _context.studentQuestionAnswer
                 join s in _context.Users on  sqa.studentsId equals s.Id
                 group s by new { s.Id, s.FirstName, s.LastName, s.UserName } into g
                 orderby g.Count() descending
                 select new User(g.Key.Id, g.Key.FirstName, g.Key.LastName, g.Key.UserName, g.Count())).ToList();

        // users = new List<User>
        // {
        //     new User("1", "John", "Doe", "johndoe", 1005),
        //     new User("2", "Jane", "Doe", "janedoe", 1000),
        //     new User("3", "John", "Smith", "johnsmith", 900),
        //     new User("4", "Jane", "Smith", "janesmith", 1200),
        //     new User("5", "John", "Jones", "johnjones", 50),
        // }.OrderByDescending(e=>e.QuestionsSolved).ToList();
        
        await base.OnInitializedAsync();
    }


}
